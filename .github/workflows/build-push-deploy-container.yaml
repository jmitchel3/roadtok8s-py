name: Compose - Build, Push & Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}}
      REPO: ${{ secrets.DOCKERHUB_REPO }}
      SSH_PK: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_OPTS: '-o StrictHostKeyChecking=no'
      REMOTE: 'root@${{ secrets.AKAMAI_INSTANCE_IP_ADDRESS }}'
      REMOTE_APP_DIR: '/opt/app'
      REMOTE_DEST_DIR: '${{ env.REMOTE }}:${{ env.REMOTE_APP_DIR }}'
      API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
      MY_SECRET_KEY: ${{ secrets.MY_SECRET_KEY }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DH_USER }}
        password: ${{ env.DH_TOKEN }}
    - name: Build the Docker image
      run: |
        docker build -f Dockerfile \
          -t "${{ env.DH_USER }}/${{ env.REPO }}:latest" \
          -t "${{ env.DH_USER }}/${{ env.REPO }}:${{ github.sha }}" \
          .
    - name: Push the Docker image to Docker Hub
      run: |
        docker push "${{ env.DH_USER }}/${{ env.REPO }}" --all-tags

    - name: Create .env file
      run: |
        echo "MY_SECRET_KEY=${{ env.MY_SECRET_KEY }}" >> .env
        echo "API_ENDPOINT=${{ env.API_ENDPOINT }}" >> .env

    - name: Implement the Private SSH Key
      run: |
        mkdir -p ~/.ssh/
        echo "${{ env.SSH_PK }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Ensure Remote App Dir Exists
      run: |
        ssh ${{ env.SSH_OPTS }} ${{ env.REMOTE }} bash -c \
          "mkdir -p ${{ env.REMOTE_APP_DIR }}"

    - name: Copy .env and compose.yaml to VM
      run: |
        scp ${{ env.SSH_OPTS }} .env ${{ env.REMOTE_DEST_DIR }}/.env
        scp ${{ env.SSH_OPTS }} compose.prod.yaml \
          ${{ env.REMOTE_DEST_DIR }}/compose.yaml

    - name: Ensure Docker and Docker Compose is installed on VM
      run: |
        ssh ${{ env.SSH_OPTS }} ${{ env.REMOTE }} << EOF
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            rm get-docker.sh
            # install Docker Compose
            sudo apt-get update
            sudo apt-get install docker-compose-plugin
          fi
        EOF
  
    - name: Run Docker Compose
      run: |
        ssh ${{ env.SSH_OPTS }} ${{ env.REMOTE }} << EOF
        cd ${{ env.REMOTE_APP_DIR }}
        # update images
        docker compose -f compose.yaml pull
        # run containers
        docker compose -f compose.yaml up -d
        EOF

    - name: Clean up .env file
      run: rm .env

    - name: Clean up SSH private key
      run: rm ~/.ssh/id_rsa